/*
 * This file was generated by Guardrail (https://github.com/twilio/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package issues.issueX
import akka.http.scaladsl.model._
import akka.http.scaladsl.model.headers.RawHeader
import akka.http.scaladsl.unmarshalling.{ Unmarshal, Unmarshaller, FromEntityUnmarshaller, FromRequestUnmarshaller, FromStringUnmarshaller }
import akka.http.scaladsl.marshalling.{ Marshal, Marshaller, Marshalling, ToEntityMarshaller, ToResponseMarshaller }
import akka.http.scaladsl.server.Directives._
import akka.http.scaladsl.server.{ Directive, Directive0, Directive1, ExceptionHandler, MalformedFormFieldRejection, MalformedHeaderRejection, MissingFormFieldRejection, MalformedRequestContentRejection, Rejection, RejectionError, Route }
import akka.http.scaladsl.util.FastFuture
import akka.stream.{ IOResult, Materializer }
import akka.stream.scaladsl.{ FileIO, Keep, Sink, Source }
import akka.util.ByteString
import io.circe.Decoder
import cats.{ Functor, Id }
import cats.data.EitherT
import cats.implicits._
import scala.concurrent.{ ExecutionContext, Future }
import scala.language.higherKinds
import scala.language.implicitConversions
import java.io.File
import java.security.MessageDigest
import java.util.concurrent.atomic.AtomicReference
import scala.util.{ Failure, Success }
import scala.language.higherKinds
import _root_.issues.issueX.Implicits._
import _root_.issues.issueX.AkkaHttpImplicits._
import _root_.issues.issueX.definitions._
trait Handler { def getFoo(respond: Resource.getFooResponse.type)(keys: Option[Iterable[String]] = None): scala.concurrent.Future[Resource.getFooResponse] }
object Resource {
  def discardEntity: Directive0 = extractMaterializer.flatMap { implicit mat => 
    extractRequest.flatMap { req => 
      req.discardEntityBytes().future
      Directive.Empty
    }
  }
  def routes(handler: Handler)(implicit mat: akka.stream.Materializer): Route = {
    {
      get(path("v1" / "foo")(parameter(Symbol("keys").as[String].*).map(xs => Option(xs).filterNot(_.isEmpty)).apply(keys => discardEntity(complete(handler.getFoo(getFooResponse)(keys))))))
    }
  }
  sealed abstract class getFooResponse(val statusCode: StatusCode)
  case object getFooResponseOK extends getFooResponse(StatusCodes.OK)
  object getFooResponse {
    implicit val getFooTRM: ToResponseMarshaller[getFooResponse] = Marshaller { implicit ec => 
      resp => getFooTR(resp)
    }
    implicit def getFooTR(value: getFooResponse)(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[List[Marshalling[HttpResponse]]] = value match {
      case r: getFooResponseOK.type =>
        scala.concurrent.Future.successful(Marshalling.Opaque {
          () => HttpResponse(r.statusCode)
        } :: Nil)
    }
    def apply[T](value: T)(implicit ev: T => getFooResponse): getFooResponse = ev(value)
    def OK: getFooResponse = getFooResponseOK
  }
}