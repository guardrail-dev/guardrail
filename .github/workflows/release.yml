name: Release

on:
  release:
    types:
      - released
  workflow_dispatch: {}

jobs:
  publish:
    name: 'Publish release'
    runs-on: ubuntu-20.04
    steps:
      - name: 'Extract project from tag'
        id: set-project-from-tag
        run: |
          module="$(echo "$GITHUB_REF" | sed 's~^refs/tags/\(.*\)-v[0-9.]\+$~\1~')"
          echo "extract project: ${GITHUB_REF}, ${module}"
          echo "::set-output name=module::$module"
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: 'Print versions'
        run: |
          java -version
          gpg --version
      # NB: Managed by support/regenerate-release-drafter.sh
      - name: 'Publish artifacts [core]'
        if: ${{ steps.set-project-from-tag.outputs.module == 'core' }}
        run: sbt 'show version' "project guardrail-core" clean compile versionCheck test ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GUARDRAIL_RELEASE_MODULE: ${{ steps.set-project-from-tag.outputs.module }}
      # NB: Managed by support/regenerate-release-drafter.sh
      - name: 'Publish artifacts [java-async-http]'
        if: ${{ steps.set-project-from-tag.outputs.module == 'java-async-http' }}
        run: sbt 'show version' "project guardrail-java-async-http" clean compile versionCheck test ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GUARDRAIL_RELEASE_MODULE: ${{ steps.set-project-from-tag.outputs.module }}
      # NB: Managed by support/regenerate-release-drafter.sh
      - name: 'Publish artifacts [java-dropwizard]'
        if: ${{ steps.set-project-from-tag.outputs.module == 'java-dropwizard' }}
        run: sbt 'show version' "project guardrail-java-dropwizard" clean compile versionCheck test ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GUARDRAIL_RELEASE_MODULE: ${{ steps.set-project-from-tag.outputs.module }}
      # NB: Managed by support/regenerate-release-drafter.sh
      - name: 'Publish artifacts [java-spring-mvc]'
        if: ${{ steps.set-project-from-tag.outputs.module == 'java-spring-mvc' }}
        run: sbt 'show version' "project guardrail-java-spring-mvc" clean compile versionCheck test ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GUARDRAIL_RELEASE_MODULE: ${{ steps.set-project-from-tag.outputs.module }}
      # NB: Managed by support/regenerate-release-drafter.sh
      - name: 'Publish artifacts [java-support]'
        if: ${{ steps.set-project-from-tag.outputs.module == 'java-support' }}
        run: sbt 'show version' "project guardrail-java-support" clean compile versionCheck test ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GUARDRAIL_RELEASE_MODULE: ${{ steps.set-project-from-tag.outputs.module }}
      # NB: Managed by support/regenerate-release-drafter.sh
      - name: 'Publish artifacts [scala-akka-http]'
        if: ${{ steps.set-project-from-tag.outputs.module == 'scala-akka-http' }}
        run: sbt 'show version' "project guardrail-scala-akka-http" clean compile versionCheck test ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GUARDRAIL_RELEASE_MODULE: ${{ steps.set-project-from-tag.outputs.module }}
      # NB: Managed by support/regenerate-release-drafter.sh
      - name: 'Publish artifacts [scala-dropwizard]'
        if: ${{ steps.set-project-from-tag.outputs.module == 'scala-dropwizard' }}
        run: sbt 'show version' "project guardrail-scala-dropwizard" clean compile versionCheck test ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GUARDRAIL_RELEASE_MODULE: ${{ steps.set-project-from-tag.outputs.module }}
      # NB: Managed by support/regenerate-release-drafter.sh
      - name: 'Publish artifacts [scala-endpoints]'
        if: ${{ steps.set-project-from-tag.outputs.module == 'scala-endpoints' }}
        run: sbt 'show version' "project guardrail-scala-endpoints" clean compile versionCheck test ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GUARDRAIL_RELEASE_MODULE: ${{ steps.set-project-from-tag.outputs.module }}
      # NB: Managed by support/regenerate-release-drafter.sh
      - name: 'Publish artifacts [scala-http4s]'
        if: ${{ steps.set-project-from-tag.outputs.module == 'scala-http4s' }}
        run: sbt 'show version' "project guardrail-scala-http4s" clean compile versionCheck test ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GUARDRAIL_RELEASE_MODULE: ${{ steps.set-project-from-tag.outputs.module }}
      # NB: Managed by support/regenerate-release-drafter.sh
      - name: 'Publish artifacts [scala-support]'
        if: ${{ steps.set-project-from-tag.outputs.module == 'scala-support' }}
        run: sbt 'show version' "project guardrail-scala-support" clean compile versionCheck test ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GUARDRAIL_RELEASE_MODULE: ${{ steps.set-project-from-tag.outputs.module }}
      # NB: Managed by support/regenerate-release-drafter.sh
      - name: 'Publish artifacts [guardrail]'
        if: ${{ steps.set-project-from-tag.outputs.module == 'guardrail' }}
        run: sbt 'show version' "project guardrail" clean compile versionCheck test ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GUARDRAIL_RELEASE_MODULE: ${{ steps.set-project-from-tag.outputs.module }}
      # NB: Managed by support/regenerate-release-drafter.sh
      - name: 'Publish artifacts [cli]'
        if: ${{ steps.set-project-from-tag.outputs.module == 'cli' }}
        run: sbt 'show version' "project guardrail-cli" clean compile versionCheck test ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GUARDRAIL_RELEASE_MODULE: ${{ steps.set-project-from-tag.outputs.module }}
