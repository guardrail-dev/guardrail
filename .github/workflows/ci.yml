name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch: {}

jobs:
  core:
    name: Run core tests
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        java: [ '15' ]
        scala: [
            { version: '2.12.14', bincompat: '2.12' }
          ]
    outputs:
      scala_versions: ${{ steps.set-scala-versions.outputs.scala_versions }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: print Java version
      run: java -version
    - uses: actions/cache@v1
      with:
        path: ~/.cache/coursier
        key: ${{ runner.os }}-scala-${{ matrix.scala.version }}-${{ hashFiles('**/*.sbt') }}
        restore-keys: |
          ${{ runner.os }}-scala-${{ matrix.scala.version }}-
    - name: Run tests
      run:  sbt ++${{ matrix.scala.version }} clean guardrail/clean checkFormatting coverage guardrail/test guardrail/coverageReport microsite/compile
    - uses: codecov/codecov-action@v1
      with:
        file: ./modules/codegen/target/scala-${{ matrix.scala.bincompat }}/scoverage-report/scoverage.xml
        fail_ci_if_error: true
    - name: Set scala version for matrix
      id: set-scala-versions  # The greps on the following line are to ensure as much as possible that we've caught the right line
      run: echo "::set-output name=scala_versions::$(sbt 'print githubMatrixSettings' | grep '^\[{' | grep 'bincompat' | tail -n 1)"
  java:
    runs-on: ubuntu-20.04
    needs: [core]
    strategy:
      matrix:
        java: [ '8', '11', '13', '14', '15', '16' ]
        scala: [
            { version: '2.12.14', bincompat: '2.12' }
          ]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: print Java version
      run: java -version
    - uses: actions/cache@v1
      with:
        path: ~/.cache/coursier
        key: ${{ runner.os }}-scala-${{ matrix.scala.version }}-${{ hashFiles('**/*.sbt') }}
        restore-keys: |
          ${{ runner.os }}-scala-${{ matrix.scala.version }}-
    - name: Run tests
      run:  sbt ++${{ matrix.scala.version }} clean guardrail/clean coverage runtimeJavaSuite guardrail/coverageReport
    - uses: codecov/codecov-action@v1
      with:
        file: ./modules/codegen/target/scala-${{ matrix.scala.bincompat }}/scoverage-report/scoverage.xml
        fail_ci_if_error: true
  scala:
    runs-on: ubuntu-20.04
    needs: [core]
    strategy:
      matrix:
        java: [ '8', '15', '16' ]
        scala: ${{ fromJson(needs.core.outputs.scala_versions) }}
        framework: [
            { framework: 'akka-http',         project: 'sample-akkaHttp'        },
            #{ framework: 'endpoints',         project: 'sample-endpoints'       },
            { framework: 'http4s',            project: 'sample-http4s'          },
            { framework: 'akka-http-jackson', project: 'sample-akkaHttpJackson' },
            { framework: 'dropwizard',        project: 'sample-dropwizardScala' }
          ]
    steps:
    - run: echo 'combo_enabled=true' >> $GITHUB_ENV
    - run: echo 'combo_enabled=false' >> $GITHUB_ENV
      if: ${{ matrix.java == '15' && matrix.scala.bincompat == '2.12' }}
    - run: echo 'combo_enabled=false' >> $GITHUB_ENV
      if: matrix.scala.bincompat == '2.13' && ( matrix.framework.framework == 'endpoints' || matrix.framework.framework == 'dropwizard' )
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: print Java version
      run: java -version
    - uses: actions/cache@v1
      with:
        path: ~/.cache/coursier
        key: ${{ runner.os }}-scala-${{ matrix.scala.version }}-${{ hashFiles('**/*.sbt') }}
        restore-keys: |
          ${{ runner.os }}-scala-${{ matrix.scala.version }}-
    - name: Run tests
      if: ${{ env.combo_enabled == 'true' }}
      run:  sbt ++${{ matrix.scala.version }} clean guardrail/clean coverage "runExample scala ${{ matrix.framework.framework }}" ${{ matrix.framework.project }}/test guardrail/coverageReport
    - uses: codecov/codecov-action@v1
      if: ${{ env.combo_enabled == 'true' }}
      with:
        file: ./modules/codegen/target/scala-${{ matrix.scala.bincompat }}/scoverage-report/scoverage.xml
        fail_ci_if_error: true
